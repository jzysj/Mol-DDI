import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.nn import Sequential, Linear, ReLU
from torch_geometric.nn import GCNConv
#from torch_geometric.nn import global_mean_pool as gmp
import pandas as pd
import numpy as np
from torch_geometric.nn import global_max_pool as gmp




class GCNNet(torch.nn.Module):
    def __init__(self, num_features_xd=62, emb_dim= 128, output_dim=128, dropout=0.2):
        super(GCNNet, self).__init__()
        # self.output_dim = output_dim
        # graph drug layers
        self.drug1_conv1 = GCNConv(num_features_xd, num_features_xd)
        self.drug1_bn1 = nn.BatchNorm1d(num_features_xd)
        self.drug1_conv2 = GCNConv(num_features_xd, num_features_xd * 2)
        self.drug1_bn2 = nn.BatchNorm1d(num_features_xd * 2)
        self.drug1_conv3 = GCNConv(num_features_xd * 2, emb_dim)
        self.drug1_bn3 = nn.BatchNorm1d(emb_dim)
        self.drug1_conv4 = GCNConv(num_features_xd * 2, num_features_xd * 2)
        self.drug1_bn4 = nn.BatchNorm1d(num_features_xd * 2)
        self.drug1_conv5 = GCNConv(num_features_xd * 2, emb_dim)
        self.drug1_bn5 = nn.BatchNorm1d(emb_dim)

        # graph drug layers
        self.drug2_conv1 = GCNConv(num_features_xd, num_features_xd)
        self.drug2_bn1 = nn.BatchNorm1d(num_features_xd)
        self.drug2_conv2 = GCNConv(num_features_xd, num_features_xd * 2)
        self.drug2_bn2 = nn.BatchNorm1d(num_features_xd * 2)
        self.drug2_conv3 = GCNConv(num_features_xd * 2, emb_dim)
        self.drug2_bn3 = nn.BatchNorm1d(emb_dim)
        self.drug2_conv4 = GCNConv(num_features_xd * 2, num_features_xd * 2)
        self.drug2_bn4 = nn.BatchNorm1d(num_features_xd * 2)
        self.drug2_conv5 = GCNConv(num_features_xd * 2, emb_dim)
        self.drug2_bn5 = nn.BatchNorm1d(emb_dim)

        # graph drug layers
        self.out_lin1 = nn.Sequential(
            nn.Linear(emb_dim, output_dim),
            nn.ReLU(inplace=True),
            nn.Linear(output_dim, output_dim)
        )
        self.feat_lin1 = nn.Linear(emb_dim, emb_dim)
        self.feat_lin2 = nn.Linear(emb_dim, emb_dim)
        self.out_lin2 = nn.Sequential(
            nn.Linear(emb_dim, output_dim),
            nn.ReLU(inplace=True),
            nn.Linear(output_dim, output_dim)
        )

        # activation and regularization
        self.relu = nn.ReLU()
        self.dropout = nn.Dropout(dropout)

    def forward(self, data1, data2, data3, data4):
        x1, edge_index1, batch1 = data1.x, data1.edge_index, data1.batch
        x2, edge_index2, batch2 = data2.x, data2.edge_index, data2.batch
        x3, edge_index3, batch3 = data3.x, data3.edge_index, data3.batch
        x4, edge_index4, batch4 = data4.x, data4.edge_index, data4.batch
        # deal drug1

        x1 = self.drug1_conv1(x1, edge_index1)
        x1 = self.drug1_bn1(x1)
        x1 = F.elu(x1)
        x1 = self.dropout(x1)
        x1 = self.drug1_conv2(x1, edge_index1)

        x1 = self.drug1_bn2(x1)
        x1 = F.elu(x1)
        x1 = self.dropout(x1)
        x1 = self.drug1_conv3(x1, edge_index1)
        x1 = self.drug1_bn3(x1)

        x1 = gmp(x1, batch1)         # global max pooling

        x2 = self.drug1_conv1(x2, edge_index2)
        x2 = self.drug1_bn1(x2)
        x2 = F.elu(x2)
        x2 = self.dropout(x2)
        x2 = self.drug1_conv2(x2, edge_index2)
        x2 = self.drug1_bn2(x2)
        x2 = F.elu(x2)
        x2 = self.dropout(x2)
        x2 = self.drug1_conv3(x2, edge_index2)
        x2 = self.drug1_bn3(x2)

        x2 = gmp(x2, batch2)         # global max pooling

        x3 = self.drug2_conv1(x3, edge_index3)
        x3 = self.drug2_bn1(x3)
        x3 = F.elu(x3)
        x3 = self.dropout(x3)
        x3 = self.drug2_conv2(x3, edge_index3)
        x3 = self.drug2_bn2(x3)
        x3 = F.elu(x3)
        x3 = self.dropout(x3)
        x3 = self.drug2_conv3(x3, edge_index3)
        x3 = self.drug2_bn3(x3)

        x3 = gmp(x3, batch3)    # global max pooling

        x4 = self.drug2_conv1(x4, edge_index4)
        x4 = self.drug2_bn1(x4)
        x4 = F.elu(x4)
        x4 = self.dropout(x4)
        x4 = self.drug2_conv2(x4, edge_index4)
        x4 = self.drug2_bn2(x4)
        x4 = F.elu(x4)
        x4 = self.dropout(x4)
        x4 = self.drug2_conv3(x4, edge_index4)
        x4 = self.drug2_bn3(x4)

        x4 = gmp(x4, batch4)         # global max pooling

        x1 = self.feat_lin1(x1)
        x2 = self.feat_lin1(x2)

        x3 = self.feat_lin2(x3)
        x4 = self.feat_lin2(x4)

        out1 = self.out_lin1(x1)
        out2 = self.out_lin1(x2)

        out3 = self.out_lin2(x3)
        out4 = self.out_lin2(x4)
        return out1, out2, out3, out4
